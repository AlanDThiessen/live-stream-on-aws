{
  "Description" : "(SO0013) - Live Stream on AWS - AWS CloudFormation Template for AWS Solutions Builder. Deploys and configures an integrated workflow between Elemental Cloud and AWS for live streaming. **WARNING** This template creates AWS resources. You will be billed for the AWS resources used if you create a stack from this template.",

  "Mappings" : {

    "AmiMap" : {
      "us-east-1"       : {"HVM64":"ami-60b6c60a"},
      "us-east-2"       : {"HVM64":"ami-71ca9114"},
      "us-west-2"       : {"HVM64":"ami-f0091d91"},
      "us-west-1"       : {"HVM64":"ami-d5ea86b5"},
      "eu-west-1"       : {"HVM64":"ami-bff32ccc"},
      "eu-central-1"    : {"HVM64":"ami-bc5b48d0"},
      "ap-northeast-1"  : {"HVM64":"ami-383c1956"},
      "ap-northeast-2"  : {"HVM64":"ami-249b554a"},
      "ap-southeast-1"  : {"HVM64":"ami-c9b572aa"},
      "ap-southeast-2"  : {"HVM64":"ami-48d38c2b"},
      "sa-east-1"       : {"HVM64":"ami-6817af04"},
      "cn-north-1"      : {"HVM64":"ami-43a36a2e"},
      "ap-south-1"      : {"HVM64":"ami-ffbdd790"}
    }
  },

  "Parameters": {

    "ElementalUser": {
      "Description" : "Username with admin rights to Elemental Cloud",
      "Type": "String"
    },

    "ElementalApiKey": {
      "Description" : "Api key For the Elemental Cloud user",
      "Type": "String",
      "NoEcho":"true"
    },

    "ElementalLive":{
      "Description" : "FQDN for Elemental Live, do not include the HTTPS:// prefix",
      "Type": "String"
    },

    "ElementalDelta1": {
      "Description" : "FQDN for Elemental Delta 1, do not include the HTTPS:// prefix",
      "Type": "String"
    },

    "ElementalDelta2": {
      "Description" : "FQDN for Elemental Delta 2, do not include the HTTPS:// prefix",
      "Type": "String"
    },

    "SourceStream": {
      "Description":"The RTP/UDP source URL for the Live Stream, leave thi blank if you wish to use the demo stream on Elemental Live",
      "Type": "String",
      "Default":"Demo"
    },

    "LiveNodes": {
      "Description":"Comma delimited list of the 3 node IDs for the 3 Elemental live nodes. the 3rd node is only required if using the Demo source stream",
      "Type": "String"
    },

    "SendAnonymousData": {
      "Description": "Choose to send anonymous data to AWS.",
      "Type": "String",
      "Default": "Yes",
      "AllowedValues": [
        "Yes",
        "No"
      ]
    }
  },

  "Conditions": {
    "SendData": {
      "Fn::Equals": [
        {
          "Ref": "SendAnonymousData"
        },
        "Yes"
      ]
    }
  },

  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
            "Label": {"default": "Elemental Configuration"},
            "Parameters": [
                "ElementalUser",
                "ElementalApiKey",
                "ElementalLive",
                "ElementalDelta1",
                "ElementalDelta2",
                "LiveNodes",
                "SourceStream"
            ]
        },
        {
          "Label": {
            "default": "Anonymous Metrics Request"
          },
          "Parameters": [
            "SendAnonymousData"
          ]
        }
      ]
    }
  },

  "Resources": {

    "Ec2NginxRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [ {
             "Effect": "Allow",
             "Principal": {"Service": [ "ec2.amazonaws.com" ]},
             "Action": [ "sts:AssumeRole" ]
          }]
        },
        "Path": "/",
        "Policies": [
          {
          "PolicyName": "root",
          "PolicyDocument": {
            "Statement": [
              {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
                "logs:DescribeLogStreams"
              ],
              "Resource": {"Fn::Join" : ["", ["arn:aws:logs:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" },":log-group:",{"Ref":"NginxCacheLogGroup"},":*" ]]}
            }
           ]
          }
        }
        ]
      }
    },

    "Ec2NginxProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
            "Path": "/",
            "Roles": [
                {
                    "Ref": "Ec2NginxRole"
                }
            ]
        }
    },

    "LambdaElementalRole":{
      "Type":"AWS::IAM::Role",
      "Properties":{
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [{ "Effect": "Allow", "Principal": {"Service": ["lambda.amazonaws.com"]}, "Action": ["sts:AssumeRole"] }]
        },
        "Path": "/",
        "Policies": [
          {
          "PolicyName": "root",
          "PolicyDocument": {
            "Statement": [
              {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {"Fn::Join" : ["", ["arn:aws:logs:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":log-group:/aws/lambda/*" ]]}
            },
            {
              "Effect": "Allow",
              "Action": [
                "cloudformation:DescribeStacks",
                "cloudformation:DescribeStackEvents",
                "cloudformation:DescribeStackResource",
                "cloudformation:DescribeStackResources"
              ],
              "Resource":{"Fn::Join" : ["",["arn:aws:cloudformation:",{"Ref" : "AWS::Region"},":",{ "Ref" : "AWS::AccountId" }, ":stack/*" ]]}
            }
             ]
          }
        }
        ]
      }
    },

    "LambdaElemental": {
      "Type" : "AWS::Lambda::Function",
       "Properties" : {
         "Code" : {
           "S3Bucket": {
             "Fn::Join": [
               "",
               [
                 "solutions-",
                 {
                   "Ref": "AWS::Region"
                 }
               ]
             ]
           },
           "S3Key" : "live-streaming/v1/live-streaming.zip"
         },
         "Description" :"Configures Elemantal Cloud trough the REST API to take in the live stream and output multiple bitrates and formats",
         "FunctionName" :{"Ref":"AWS::StackName"},
         "Handler" : "live-streaming.lambda_handler",
         "Role": { "Fn::GetAtt" : ["LambdaElementalRole", "Arn"] },
         "Runtime" : "python2.7",
         "Timeout" : "120"
       }
     },

     "ElementalConfig" : {
       "Type": "AWS::CloudFormation::CustomResource",
         "Properties" : {
           "ServiceToken":{"Fn::Join":["", ["arn:aws:lambda:",{"Ref" : "AWS::Region"},":",{"Ref" :"AWS::AccountId"},":function:",{"Ref" : "LambdaElemental"},""]] },
           "User":{"Ref":"ElementalUser"},
           "ApiKey":{"Ref":"ElementalApiKey"},
           "Live":{"Ref":"ElementalLive"},
           "Deltas": [{"Ref":"ElementalDelta1"},{"Ref":"ElementalDelta2"}],
           "Name":{"Ref":"AWS::StackName"},
           "Source": {"Ref":"SourceStream"},
           "Nodes":{"Ref":"LiveNodes"}
         }
     },

    "ELBSecurityGroup":{
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
      "GroupDescription" : "Port 80 access",
      "SecurityGroupIngress" : [
        { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"}
      ]
    }
  },

  "NginxCacheSecurityGroup":{
      "Type": "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription": "Cache Server Autoscaling Group access",
          "SecurityGroupIngress" : [
            {"IpProtocol" : "tcp","FromPort" : "80","ToPort" : "80", "SourceSecurityGroupId" : {"Fn::GetAtt": [ "ELBSecurityGroup","GroupId" ]}}
          ]
       }
  },

  "NginxLaunchConfig":{
    "Type" : "AWS::AutoScaling::LaunchConfiguration",
    "Metadata" : {
      "AWS::CloudFormation::Init" : {
        "configSets" : {
          "CacheInstall" : ["Config","Install"]
        },
        "Config" : {
          "files": {
          "/etc/nginx/nginx.conf" : {
               "content" : {"Fn::Join":[ "", [
                 "# NGINX Reverse Caching Proxy \n",
                 "# - HLS / ISM / MPD streaming cache \n",
                 "# - Single configuration, nested configs not used \n",
                 "# - Deploy to /etc/nginx/nginx.conf \n",
                 "# - cache goes into /dev/shm \n",
                 "user                     nginx; \n",
                 "worker_processes         auto; \n",
                 "error_log                /var/log/nginx/error.log; \n",
                 "pid                      /var/run/nginx.pid; \n",
                 "events { \n",
                 "  worker_connections     1024; \n",
                 "} \n",
                 "http { \n",
                 " \n",
                 "  # Directives \n",
                 "  # - $server_name tacked to log, other options are defaults \n",
                 " \n",
                 "  log_format             main '$remote_addr - $remote_user [$time_local] \"$request\" ' \n",
                 "                              '$status $body_bytes_sent \"$http_referer\" ' \n",
                 "                              '\"$http_user_agent\" \"$http_x_forwarded_for\" \"$server_name\"'; \n",
                 "  access_log             /var/log/nginx/access.log  main; \n",
                 " \n",
                 "  sendfile               on; \n",
                 "  tcp_nopush             on; \n",
                 "  tcp_nodelay            on; \n",
                 "  keepalive_timeout      65; \n",
                 "  types_hash_max_size    2048; \n",
                 " \n",
                 "  include                /etc/nginx/mime.types; \n",
                 "  default_type           application/octet-stream; \n",
                 "  index                  index.html index.htm; \n",
                 " \n",
                 "  # Proxy \n",
                 " \n",
                 "  log_format             cache '$server_addr - $upstream_cache_status [$time_local] ' \n",
                 "                               '\"Cache-Control: $upstream_http_cache_control\" ' \n",
                 "                               '\"Expires: $upstream_http_expires\" ' \n",
                 "                               '\"$request\" ($status) ' \n",
                 "                               '\"$http_user_agen\" \"$server_name\"'; \n",
                 "  access_log             /var/log/nginx/cache.log cache; \n",
                 " \n",
                 "  proxy_buffering        on; \n",
                 "  proxy_buffers          8 64k; \n",
                 "  proxy_cache_path       /dev/shm/nginx levels=1:2 keys_zone=default_cache:10m inactive=20m max_size=2g; \n",
                 "  proxy_temp_path        /dev/shm/nginx/tmp; \n",
                 "  proxy_cache_methods    GET HEAD POST; \n",
                 "  proxy_cache_lock       off; # No origin protection \n",
                 "  proxy_cache_use_stale  off; # No stale data, hard failover \n",
                 "  proxy_bind             0.0.0.0; \n",
                 "  proxy_cache_valid      200 302 10m; \n",
                 "  proxy_cache_valid      301      1h; \n",
                 "  proxy_cache_valid      any      1m; \n",
                 " \n",
                 "  # Default Service \n",
                 " \n",
                 "  # - All protocols \n",
                 "  # - Single backend pair with failover to a backup on x*y timeout failures \n",
                 "  # - Secondary backend could be different region, onprem, etc as uber-fallback \n",
                 "  # - health_check directive requires NGINX+ \n",
                 "  # - standard timeout used when health_check not available \n",
                 " \n",
                 "  upstream default_backend { \n",
                 "    server               ",{ "Ref" : "ElementalDelta1" },":80 fail_timeout=5s max_fails=3; \n",
                 "    server               ",{ "Ref" : "ElementalDelta2" },":80 backup; \n",
                 "  } \n",
                 " \n",
                 "  server { \n",
                 "    listen               80 default_server; \n",
                 "    listen               [::]:80 default_server; \n",
                 "    server_name          default_backend; \n",
                 "    access_log           /var/log/nginx/access.log main; \n",
                 "    access_log           /var/log/nginx/cache.log cache; \n",
                 " \n",
                 "    add_header           'Access-Control-Allow-Origin' '*'; \n",
                 "    add_header           'Access-Control-Allow-Credentials' 'true'; \n",
                 " \n",
                 "    location / { \n",
                 "      proxy_pass         http://default_backend; \n",
                 "      #health_check      match=delta \n",
                 "      proxy_cache        default_cache; \n",
                 "      proxy_http_version 1.1; \n",
                 "      proxy_set_header   Connection \"\"; \n",
                 "      add_header         X-Media-Cache-Status $upstream_cache_status; \n",
                 "      add_header         X-Media-Handled-By $proxy_host; \n",
                 "    } \n",
                 "    location /server-status { \n",
                 "      stub_status        on; \n",
                 "    } \n",
                 "  } \n",
                 "} "
            ]]},
            "mode" : "000755",
            "owner" : "root",
            "group" : "root"
          },
          "/tmp/cwlogs/nginxlog.conf": {
              "content": {
                  "Fn::Join": [
                      "",
                      [
                          "[general]\n",
                          "state_file= /var/awslogs/agent-state\n",
                          "\n",
                          "[/var/log/nginx/cache.log]\n",
                          "file = /var/log/nginx/cache.log\n",
                          "log_group_name = ", {"Ref": "NginxCacheLogGroup"}, "\n",
                          "log_stream_name = {instance_id}/cache.log\n",
                          "datetime_format = %d/%b/%Y:%H:%M:%S\n"
                      ]
                  ]
              },
              "mode": "000400",
              "owner": "root",
              "group": "root"
            }
         }
        },
        "Install":{
            "packages" : {
              "yum" : {
                "nginx":[]
              }
            },
        "services" : {
            "sysvinit" : {
              "nginx" : {
                "enabled" : "true",
                "ensureRunning" : "true",
                "files" : ["/etc/nginx/nginx.conf"],
                "sources" : ["/var/www/html"]
              }
            }
          },
        "commands" : {
          "01-get-cwl-agent" : {
            "command" : "curl -o /tmp/awslogs-agent-setup.py https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py "
          },
          "02-install-cwl-agent":{
            "command":{ "Fn::Join" : ["", ["python /tmp/awslogs-agent-setup.py -n -c /tmp/cwlogs/nginxlog.conf -r", { "Ref" : "AWS::Region" }]]}
           }
          }
        }
      }
    },
    "Properties" : {
      "ImageId" : { "Fn::FindInMap" : [ "AmiMap", { "Ref" : "AWS::Region" }, "HVM64"]},
      "InstanceType":"m4.xlarge",
      "IamInstanceProfile"   : {"Ref":"Ec2NginxProfile"},
      "SecurityGroups" : [ {"Ref" : "NginxCacheSecurityGroup"} ],
      "UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
        " #!/bin/bash -xe\n",
        " yum update -y aws-cfn-bootstrap\n",
        " /opt/aws/bin/cfn-init -v",
        "    --stack ", { "Ref" : "AWS::StackName" },
        "    --resource NginxLaunchConfig",
        "    --configsets CacheInstall",
        "    --region ", { "Ref" : "AWS::Region" }, "\n",
        " /opt/aws/bin/cfn-signal -e $? ",
        "    --stack ", { "Ref" : "AWS::StackName" },
        "    --resource NginxCacheGroup ",
        "    --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
    }
  },

  "NginxCacheGroup" : {
    "Type" : "AWS::AutoScaling::AutoScalingGroup",
    "Properties" : {
      "AvailabilityZones" : { "Fn::GetAZs" : "" },
      "LaunchConfigurationName" : { "Ref" : "NginxLaunchConfig" },
      "MinSize" : "2",
      "DesiredCapacity":"2",
      "MaxSize" : "6",
      "LoadBalancerNames" :[{ "Ref" : "ELB" }]
    },
    "CreationPolicy" : {
      "ResourceSignal" : {
        "Count": "2",
        "Timeout" : "PT5M"
      }
    }
  },

  "NginxCacheLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
          "RetentionInDays": 7
      }
  },

  "ScaleUpPolicy" : {
    "Type" : "AWS::AutoScaling::ScalingPolicy",
    "Properties" : {
      "AdjustmentType" : "ChangeInCapacity",
      "AutoScalingGroupName" : { "Ref" : "NginxCacheGroup" },
      "Cooldown" : "180",
      "ScalingAdjustment" : "2"
    }
  },

  "ScaleDownPolicy" : {
    "Type" : "AWS::AutoScaling::ScalingPolicy",
    "Properties" : {
      "AdjustmentType" : "ChangeInCapacity",
      "AutoScalingGroupName" : { "Ref" : "NginxCacheGroup" },
      "Cooldown" : "60",
      "ScalingAdjustment" : "-1"
    }
  },

  "CPUAlarmHigh": {
    "Type": "AWS::CloudWatch::Alarm",
    "Properties": {
      "EvaluationPeriods": "3",
      "Statistic": "Average",
      "Threshold": "70",
      "AlarmDescription": "Alarm if CPU too high indicating a high load",
      "Period": "60",
      "AlarmActions": [ { "Ref": "ScaleUpPolicy" } ],
      "Namespace": "AWS/EC2",
      "Dimensions": [{
        "Name": "AutoScalingGroupName",
        "Value": { "Ref": "NginxCacheGroup" }
      }],
      "ComparisonOperator": "GreaterThanThreshold",
      "MetricName": "CPUUtilization"
    }
  },

  "CPUAlarmLow": {
    "Type": "AWS::CloudWatch::Alarm",
    "Properties": {
      "EvaluationPeriods": "3",
      "Statistic": "Average",
      "Threshold": "40",
      "AlarmDescription": "Alarm if CPU too low or metric disappears indicating instance is down",
      "Period": "60",
      "AlarmActions": [ { "Ref": "ScaleDownPolicy" } ],
      "Namespace": "AWS/EC2",
      "Dimensions": [{
        "Name": "AutoScalingGroupName",
        "Value": { "Ref": "NginxCacheGroup" }
      }],
      "ComparisonOperator": "GreaterThanThreshold",
      "MetricName": "CPUUtilization"
    }
  },

  "ELB":{
    "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "SecurityGroups" : [{"Fn::GetAtt":["ELBSecurityGroup","GroupId" ]}],
        "AvailabilityZones" : { "Fn::GetAZs" : "" },
        "CrossZone": "true",
        "LoadBalancerName": { "Ref": "AWS::StackName" },
        "Listeners": [
          {
            "LoadBalancerPort": "80",
            "InstancePort": "80",
            "Protocol": "HTTP"
          }
        ],
        "HealthCheck": {
          "Target": "TCP:80",
          "HealthyThreshold": "3",
      "UnhealthyThreshold": "5",
      "Interval": "30",
      "Timeout": "5"
    }
   }
},

"CloudFront": {
    "Type": "AWS::CloudFront::Distribution",
    "Properties": {
        "DistributionConfig": {
            "Comment":"",
            "Origins": [
                {
                    "DomainName":{"Fn::GetAtt":["ELB","DNSName" ]},
                    "Id": "default",
                    "CustomOriginConfig": {
                        "HTTPPort":"80",
                        "HTTPSPort": "443",
                        "OriginProtocolPolicy": "http-only"
                    }
                }
            ],
            "DefaultCacheBehavior": {
                "TargetOriginId": "default",
                "SmoothStreaming": "false",
                "ForwardedValues": {
                    "QueryString": "false",
                    "Cookies": {
                        "Forward": "none"
                    }
                },
                "ViewerProtocolPolicy": "allow-all"
            },
            "CustomErrorResponses": [
                {
                    "ErrorCode": "400",
                    "ErrorCachingMinTTL": "5"
                },
                {
                    "ErrorCode": "403",
                    "ErrorCachingMinTTL": "5"
                },
                {
                    "ErrorCode": "404",
                    "ErrorCachingMinTTL": "5"
                },
                {
                    "ErrorCode": "500",
                    "ErrorCachingMinTTL": "5"
                },
                {
                    "ErrorCode": "502",
                    "ErrorCachingMinTTL": "5"
                },
                {
                    "ErrorCode": "503",
                    "ErrorCachingMinTTL": "5"
                },
                {
                    "ErrorCode": "504",
                    "ErrorCachingMinTTL": "5"
                }
            ],
            "PriceClass": "PriceClass_All",
            "Enabled": "true",
            "ViewerCertificate": {
                "CloudFrontDefaultCertificate": "true"
            }
        }
    }
  },

  "SolutionHelperRole": {
    "Type": "AWS::IAM::Role",
    "Properties": {
      "AssumeRolePolicyDocument": {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "lambda.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      },
      "Path": "/",
      "Policies": [
        {
          "PolicyName": "Custom_Lambda_Loader_Permissions",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": "arn:aws:logs:*:*:*"
              }
            ]
          }
        }
      ]
    }
  },
  "SolutionHelper": {
    "Type": "AWS::Lambda::Function",
    "Properties": {
      "Handler": "solution-helper.lambda_handler",
      "Role": {
        "Fn::GetAtt": [
          "SolutionHelperRole",
          "Arn"
        ]
      },
      "Description": "This function creates a CloudFormation custom lambda resource that sends anonymous data to AWS.",
      "Code": {
        "S3Bucket": {
          "Fn::Join": [
            "",
            [
              "solutions-",
              {
                "Ref": "AWS::Region"
              }
            ]
          ]
        },
        "S3Key": "library/solution-helper/v3/solution-helper.zip"
      },
      "Runtime": "python2.7",
      "Timeout": "120"
    }
  },
  "SendingAnonymousData": {
    "Type": "Custom::LoadLambda",
    "Condition": "SendData",
    "Properties": {
      "ServiceToken": {
        "Fn::GetAtt": [
          "SolutionHelper",
          "Arn"
        ]
      },
      "SendAnonymousData": {
        "Fn::Join": [
          "",
          [
            "{ 'Solution' : '",
            "SO0013",
            "', ",
            "'UUID' : '",
            {
              "Fn::GetAtt": [
                "CreateUniqueID",
                "UUID"
              ]
            },
            "', ",
            "'Data': {",
            "'Region': '",
            {
              "Ref": "AWS::Region"
            },
            "'",
            "}",
            "}"
          ]
        ]
      }
    }
  },
  "CreateUniqueID": {
    "Type": "Custom::LoadLambda",
    "Properties": {
      "ServiceToken": {
        "Fn::GetAtt": [
          "SolutionHelper",
          "Arn"
        ]
      },
      "Region": {
        "Ref": "AWS::Region"
      },
      "CreateUniqueID": "true"
    }
  }
},
"Outputs": {

  "HLSStream":{
      "Value": { "Fn::Join" : ["", ["http://",{"Fn::GetAtt": ["CloudFront","DomainName"]} , "/out/u/",{"Ref":"AWS::StackName"},".m3u8"]]},
    "Description":"Live Stream - Apple HLS"
  },

  "DASHStream":{
     "Value": { "Fn::Join" : ["", ["http://",{"Fn::GetAtt": ["CloudFront","DomainName"]} , "/out/u/",{"Ref":"AWS::StackName"},".mpd"]]},
    "Description":"Live Stream - MPEG DASH"
  },

  "MSSStream":{
     "Value": { "Fn::Join" : ["", ["http://",{"Fn::GetAtt": ["CloudFront","DomainName"]} , "/out/u/",{"Ref":"AWS::StackName"},".ism"]]},
    "Description":"Live Stream - Microsoft Smooth"
  },

  "ElementalIds":{
    "Value":{ "Fn::GetAtt" : [ "ElementalConfig", "ElementalIds" ] },
     "Description":"Resource IDs for Elemental Cloud, used on a Stack Delete"
  }
}
}
